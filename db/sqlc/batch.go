// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: batch.go

package sqlc

import (
	"context"
	"errors"

	"github.com/jackc/pgx/v5"
)

var (
	ErrBatchAlreadyClosed = errors.New("batch already closed")
)

const createProducts = `-- name: CreateProducts :batchexec
INSERT INTO products(name, description, price, tax_rate, metadata)
VALUES($1, $2, $3, $4, $5)
`

type CreateProductsBatchResults struct {
	br     pgx.BatchResults
	tot    int
	closed bool
}

type CreateProductsParams struct {
	Name        string  `json:"name"`
	Description *string `json:"description"`
	Price       float64 `json:"price"`
	TaxRate     float64 `json:"taxRate"`
	Metadata    []byte  `json:"metadata"`
}

func (q *Queries) CreateProducts(ctx context.Context, arg []CreateProductsParams) *CreateProductsBatchResults {
	batch := &pgx.Batch{}
	for _, a := range arg {
		vals := []interface{}{
			a.Name,
			a.Description,
			a.Price,
			a.TaxRate,
			a.Metadata,
		}
		batch.Queue(createProducts, vals...)
	}
	br := q.db.SendBatch(ctx, batch)
	return &CreateProductsBatchResults{br, len(arg), false}
}

func (b *CreateProductsBatchResults) Exec(f func(int, error)) {
	defer b.br.Close()
	for t := 0; t < b.tot; t++ {
		if b.closed {
			if f != nil {
				f(t, ErrBatchAlreadyClosed)
			}
			continue
		}
		_, err := b.br.Exec()
		if f != nil {
			f(t, err)
		}
	}
}

func (b *CreateProductsBatchResults) Close() error {
	b.closed = true
	return b.br.Close()
}
