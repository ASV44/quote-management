// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: products.sql

package sqlc

import (
	"context"
)

const deleteProducts = `-- name: DeleteProducts :exec
DELETE FROM products
WHERE id = ANY($1::INT[])
`

func (q *Queries) DeleteProducts(ctx context.Context, ids []int32) error {
	_, err := q.db.Exec(ctx, deleteProducts, ids)
	return err
}

const getProductByID = `-- name: GetProductByID :one
SELECT id, name, description, price, tax_rate, metadata, created_at, updated_at
FROM products
WHERE id = $1
`

func (q *Queries) GetProductByID(ctx context.Context, id int32) (Product, error) {
	row := q.db.QueryRow(ctx, getProductByID, id)
	var i Product
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.Price,
		&i.TaxRate,
		&i.Metadata,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getProducts = `-- name: GetProducts :many
SELECT id, name, description, price, tax_rate, metadata, created_at, updated_at
FROM products p
WHERE p.name ILIKE '%' || $3::TEXT || '%'
  OR p.description ILIKE '%' || $3::TEXT || '%'
ORDER BY
    CASE WHEN $4::TEXT = 'name' AND $5::TEXT = 'asc' THEN p.name END ASC,
    CASE WHEN $4::TEXT = 'name' AND $5::TEXT = 'desc' THEN p.name END DESC,
    CASE WHEN $4::TEXT = 'price' AND $5::TEXT = 'asc' THEN p.price END ASC,
    CASE WHEN $4::TEXT = 'price' AND $5::TEXT = 'desc' THEN p.price END DESC,
    CASE WHEN $4::TEXT = 'created_at' AND $5::TEXT = 'asc' THEN p.created_at END ASC,
    CASE WHEN $4::TEXT = 'created_at' AND $5::TEXT = 'desc' THEN p.created_at END DESC
LIMIT $1
OFFSET $2
`

type GetProductsParams struct {
	Limit     int32  `json:"limit"`
	Offset    int32  `json:"offset"`
	Query     string `json:"query"`
	Sortby    string `json:"sortby"`
	Sortorder string `json:"sortorder"`
}

// CASE
// WHEN @sortOrder = 'asc' THEN
//
//	CASE WHEN @sortBy::TEXT = 'name' THEN p.name END
//	CASE WHEN @sortBy::TEXT = 'price' THEN p.price END
//	CASE WHEN @sortBy::TEXT = 'created_at' THEN p.created_at END
//
// WHEN @sortOrder = 'desc' THEN
//
//	CASE WHEN @sortBy::TEXT = 'name' THEN p.name END DESC
//	CASE WHEN @sortBy::TEXT = 'price' THEN p.price END DESC
//	CASE WHEN @sortBy::TEXT = 'created_at' THEN p.created_at END DESC
//
// END
func (q *Queries) GetProducts(ctx context.Context, arg GetProductsParams) ([]Product, error) {
	rows, err := q.db.Query(ctx, getProducts,
		arg.Limit,
		arg.Offset,
		arg.Query,
		arg.Sortby,
		arg.Sortorder,
	)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Product
	for rows.Next() {
		var i Product
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.Price,
			&i.TaxRate,
			&i.Metadata,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getProductsTotalCount = `-- name: GetProductsTotalCount :one
SELECT COUNT(*)
FROM products
WHERE name ILIKE '%' || $1::TEXT || '%'
  OR description ILIKE '%' || $1::TEXT || '%'
`

func (q *Queries) GetProductsTotalCount(ctx context.Context, query string) (int64, error) {
	row := q.db.QueryRow(ctx, getProductsTotalCount, query)
	var count int64
	err := row.Scan(&count)
	return count, err
}
